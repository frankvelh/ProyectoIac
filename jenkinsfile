pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-2'
        ACCOUNT_ID = '932119507588'
        BACKEND_IMAGE = "${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/hotel-backend"
        FRONTEND_IMAGE = "${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/hotel-frontend"
        BUCKET_NAME = 'hotel-reservas-web'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Checkov Analysis') {
            steps {
                sh 'docker run --rm -v $PWD:/app bridgecrew/checkov -d /app'
            }
        }
      

        stage('Test Backend') {
            steps {
                dir('hotel-app/backend') {
                    sh 'chmod +x mvnw'
                    sh './mvnw test || echo "Pruebas fallaron pero contin√∫o"'
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('Build Backend') {
            steps {
                dir('hotel-app/backend') {
                    sh 'chmod +x mvnw'
                    sh './mvnw clean package -DskipTests'
                }
            }
        }

        stage('Test Frontend') {
            steps {
                dir('hotel-app/frontend') {
                    sh '''
                    docker run --rm -v $PWD:/app -w /app node:18 \
                    sh -c "npm install && npm test"
                    '''
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('hotel-app/frontend') {
                    sh '''
                    docker run --rm -v $PWD:/app -w /app node:18 \
                    sh -c "npm install && npm run build"
                    '''
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                sh '''
                docker build -t hotel-backend ./hotel-app/backend
                docker build -t hotel-frontend ./hotel-app/frontend
                '''
            }
        }

        stage('Login & Push to ECR') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-creds'
                ]]) {
                    sh '''
                    aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

                    docker tag hotel-backend:latest $BACKEND_IMAGE:latest
                    docker tag hotel-frontend:latest $FRONTEND_IMAGE:latest

                    docker push $BACKEND_IMAGE:latest
                    docker push $FRONTEND_IMAGE:latest
                    '''
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-creds'
                ]]) {
                    dir('infra') {
                        sh '''
                        terraform init
                        terraform apply -auto-approve
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finalizado"
            script {
                if (fileExists('hotel-app/backend/target/surefire-reports')) {
                    junit 'hotel-app/backend/target/surefire-reports/*.xml'
                } else {
                    echo 'No hay resultados de pruebas JUnit para el backend.'
                }
            }
        }

        failure {
            echo "Pipeline fallido. Revisa los errores."
        }
    }
}
